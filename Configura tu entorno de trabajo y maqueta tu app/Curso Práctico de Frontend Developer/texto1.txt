Buenas pr√°cticas de CSS: reflexi√≥n y advertencias
¬°Hola, Platzinauta! ¬°Qu√© alegr√≠a que est√©s por iniciar el Curso Pr√°ctico de Frontend Developer! üåà

En esta lectura quiero ayudarte a aclarar algunos conceptos sobre las pr√≥ximas clases, tus posibles rutas de aprendizaje y el proyecto del curso. üíö

¬øQu√© es una buena pr√°ctica?
Antes de seguir, responde la siguiente pregunta (mentalmente o en la secci√≥n de comentarios): ¬øqu√© significa seguir ‚Äúbuenas pr√°cticas‚Äù?

Para m√≠ las buenas pr√°cticas son un conjunto de costumbres, acciones, decisiones y/o herramientas que agilizan, mejoran el rendimiento, legibilidad, mantenimiento y/o escalabilidad de nuestros proyectos en un CONTEXTO muy espec√≠fico.

La palabra clave es contexto. Las buenas pr√°cticas NO son absolutas. As√≠ como funcionan en ciertas situaciones, dejan de tener sentido en otras circunstancias.

Es un error com√∫n hablar de buenas o malas pr√°cticas sin entender correctamente su contexto. Yo mismo he ca√≠do en esa falacia. Por fortuna, mis l√≠deres, profes, compa√±eras y amigos han tenido la paciencia y empat√≠a de explicarme c√≥mo analizar el contexto de cada situaci√≥n antes de llegar a una conclusi√≥n.

El contexto de este curso
El Curso Pr√°ctico de Frontend Developer pertenece a dos escuelas en Platzi:

Escuela de JavaScript: la ruta de aprendizaje m√°s corta para aprender desarrollo web desde cero hasta nivel muy avanzado con el Stack PERNN (PostgreSQL, Express.js, React.js, Next.js y Node.js).
Escuela de Desarrollo Web: la ruta de aprendizaje m√°s larga y completa para dominar y profundizar en todas las herramientas o stacks de programaci√≥n m√°s importantes del desarrollo web.
üí° Escuela de JavaScript vs. Escuela de Desarrollo Web: ¬øCu√°l elegir? ¬øCu√°l es mejor?

Junto al Curso de Frontend Developer, este curso es la introducci√≥n al gran mundo de la maquetaci√≥n con HTML y CSS que estudiaremos en la Escuela de JavaScript. Luego de este curso seguir√°n las bases de JavaScript, frontend con React.js y backend con Node.js.

En cambio, en la Escuela de Desarrollo Web tenemos much√≠simos m√°s cursos para practicar HTML y CSS, crear a√∫n m√°s proyectos para tu portafolio profesional y profundizar en herramientas complejas como responsive design, CSS Grid, flexbox y animaciones con CSS.

Etiqueta style vs. archivos .css
Mi nombre es JuanDC, Course Director de este curso y la Escuela de JavaScript 2.0. Tambi√©n soy el responsable de que en este curso escribamos el HTML y CSS de cada p√°gina en el mismo archivo usando la etiqueta style.

En las pr√≥ximas clases puede surgirte la duda de por qu√© decidimos no separar los estilos en sus propios archivos .css si supuestamente es una ‚Äúmala pr√°ctica‚Äù. Pero recuerda que las buenas o malas pr√°cticas NO son absolutas, siempre dependen de un contexto. üòÖ

Teniendo eso en cuenta: ¬øpor qu√© crees que es una mala pr√°ctica escribir el CSS en etiquetas style en vez de archivos .css?

Durante la etapa de planeaci√≥n discutimos mucho junto a Teffcode, Oscar Barajas y Nico Molina para encontrar la mejor manera de conectar todos sus cursos en la Escuela de JavaScript y construir el mismo proyecto progresivamente.

M√°s adelante en tu ruta de aprendizaje vas a tomar el Curso Pr√°ctico de React.js. Uno de sus objetivos es ense√±arte c√≥mo convertir p√°ginas en HTML y CSS a componentes en React. Vas a darte cuenta que all√≠ descargamos el proyecto de este Curso Pr√°ctico de Frontend Developer para separarlo entre vistas, componentes y contenedores.

La raz√≥n de mantener el HTML y CSS de cada secci√≥n de nuestra tienda en un solo archivo .html es para facilitar nuestro trabajo de separar y unir todo ese c√≥digo cuando tomemos el curso de React.

No es un error. ¬°Y tampoco una mala pr√°ctica!

Conclusiones
Si tu proyecto con HTML y CSS es la versi√≥n final de la aplicaci√≥n que desplegar√°s a producci√≥n (la que publicar√°s en internet y ser√° usada por usuarios reales), entonces definitivamente es muy buena pr√°ctica separar tus estilos en archivos .css.

En cambio, si tu maquetaci√≥n con HTML y CSS es apenas el principio de tu desarrollo frontend y m√°s adelante convertir√°s estos elementos en componentes con alguna herramienta como Web Components, React.js, Angular, Svelte o Vue.js, entonces NO es una mala pr√°ctica separar cada elemento en su respectivo archivo ni mantener su HTML y CSS en el mismo lugar.

Espero que esta explicaci√≥n te haya ayudado un poco a entender el flujo de desarrollo y decisiones que tomamos de este curso. Recuerda siempre tener muy claro el contexto de cada situaci√≥n antes de determinar si es una buena o mala pr√°ctica.

Cu√©ntame sobre cualquier duda que tengas sobre buenas pr√°cticas en la maquetaci√≥n web. ¬°Mucha suerte completando este curso!