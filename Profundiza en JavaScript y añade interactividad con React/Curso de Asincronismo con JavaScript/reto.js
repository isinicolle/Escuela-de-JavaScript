/**
 * Instalar: npm i xmlhttprequest
 * 
 * XMLHttpRequest es un objeto de JS que permite hacer peticiones hacia servicios en la nube(URLs o APIs).
 * 
 */

const XMLHttpRequest = require("xmlhttprequest");
const API = "https://api.escuelajs.co/api/v1";

function fetchData(urlApi, callback) {
  let xhttp = new XMLHttpRequest();
  xhttp.open("GET", urlApi, true);
  xhttp.onreadystatechange = function (event) {
    if (xhttp.readyState === 4) {
      if (xhttp.status === 200) {
        callback(null, JSON.parse(xhttp.resposeText));
      }
    } else {
      const error = new Error("Error" + urlApi);
      return callback(error, null);
    }
  };
  xhttp.send();
}


//ðŸ“² XMLHttpRequest es un objeto de JS que permite hacer peticiones hacia servicios en la nube(URLs o APIs).

//ðŸ“ª Existen 5 estados en un llamado XMLHttpRequest:

/*
0 â†’ Se ha inicializado.
1 â†’ Loading (cargando).
2 â†’ Se ha cargado.
3 â†’ Procesamiento si existe alguna descarga.
4 â†’ Completado.
.
ðŸ“« MÃ©todos y propiedades:
.
xmlhttp.open() â†’ Prepara la peticiÃ³n para ser enviada tomando tres parÃ¡metros: prÃ³tocolo, url, asÃ­ncrono (true).
xmlhttp.readyState â†’ Retorna el estado de la peticiÃ³n.
xmlhttp.onreadystatechange â†’ Un eventHandler que es llamado cuando la propiedad readyState cambia.
xmlhttp.status â†’ Retorna el estado de la respuesta de la peticiÃ³n. (200,400,500)
xmlhttp.send() â†’ EnvÃ­a la peticiÃ³n.
.
ðŸ“¬ CaracterÃ­sticas del protocolo http:
.
Verbos: Los verbos indican acciones que estÃ¡n asociadas a peticiones y recursos, es decir, sirven para la manipulaciÃ³n de recursos cliente/servidor. Los Verbos http son:

GET â†’ Solicita un recurso.
HEAD â†’ Solicita un recurso pero sin retornar informaciÃ³n, la estructura de esta peticiÃ³n es igual que get tanto en su headers como estatus. Es Ãºtil cuando vamos a utilizar API, para comprobar si lo que vamos a enviar esta correcto y puede ser procesado.
POST â†’ Sirve para la creaciÃ³n de recursos en el servidor.
PUT â†’ Actualiza por completo un recurso, reemplaza todas las representaciones actuales del recurso de destino con la carga Ãºtil de la peticiÃ³n.
PATCH â†’ Actualiza parcialmente un recurso.
DELETE â†’ Elimina un recurso.
.
ðŸ“­ Los cÃ³digos de estados del servidor:
.
El cÃ³digo de estado (status codes) sirve para describir el estado de la peticiÃ³n hecha al servidor.

1xx â†’ Indican que la peticiÃ³n fue recibida por el servidor, pero estÃ¡ siendo procesada por el servidor.
2xx â†’ Indican que la peticiÃ³n fue recibida, aceptada y procesada correctamente.
3xx â†’ Indican que hay que tomar acciones adicionales para completar la solicitud.
4xx â†’ Indican errores del lado del cliente que hizo mal una solicitud.
5xx â†’ Indican errores del servidor. Suelen aparecer cuando existe un fallo en la ejecuciÃ³n en el servidor.
.
ðŸ“§ Los cÃ³digos mÃ¡s comunes a la hora de interactuar con una API son:
.

200 â†’ OK â†’ Indica que todo estÃ¡ correcto.
201 â†’ Created â†’ Todo estÃ¡ correcto cuando se hizo una solicitud POST, el recurso se creÃ³ y se guardÃ³ correctamente.
204 â†’ No Content â†’ Indica que la solicitud se completÃ³ correctamente pero no devolviÃ³ informaciÃ³n. Este es comÃºn cuando se hacen peticiones con el verbo DELETE.
400 â†’ Bad Request â†’ Indica que algo estÃ¡ mal en la peticiÃ³n (no encontrÃ³ algo).
401 â†’ Unauthorized â†’ Significa que antes de hacer una solicitud al servidor nos debemos autenticar.
403 â†’ Forbidden â†’ Indica que no tenemos acceso a ese recurso aunque se estÃ© autenticado.
404 â†’ Not Found â†’ Indica que no existe el recurso que se estÃ¡ intentando acceder.
500 â†’ Internal Server Error â†’ Indica que algo fallÃ³, es un error que retorna el servidor cuando la solicitud no pudo ser procesada.



Ir a la consola y ubicarnos en la carpeta del proyecto y escribir el comando para instalar el paquete XMLHttpRequest:
npm i xmlhttprequest
Ir al VSC y crear un archivo llamado challenge.js en la ruta src/callback. El archivo queda:
*/

const XMLHttppRequest = requiere('xmlhttprquest'); //llamado al XmlHttpRequest
const API = 'https://api.escuelajs.co/api/v1'; //API en mayÃºscula porque es una referencia que no va a cambiar

function fetchData(urlApi, callback){ //urlApi: no confundir y colocar API
	let xhttp = new XMLHttppRequest(); //referencia a new XMLHttpRequest

	xhttp.open('GET', urlApi, true); //peticiÃ³n "obtener" con true para habilitarlo
	xhttp.onreadystatechange = function(event) { //escucha diferentes estados de la solicitud y conocer cuando estÃ¡ disponible la informaciÃ³n
	if(xhttp.readyState === 4) { //si el estado ha sido completada la llamada
		if(xhttp.status === 200 ){ //el servido responde de forma correcta
			callback(null, JSON.parse(xhttp.responseText)); //dentro de xhttp.responseTex recibimos lo que entrega el servidor en texto y se hace la transformaciÃ³n en JSON
		}
	} else {
		const error = new Error('Error' + urlApi);
		return callback(error,null); //es null porque no se estÃ¡ regresando ningÃºn dato
	}
	}
	xhttp.send();
}
